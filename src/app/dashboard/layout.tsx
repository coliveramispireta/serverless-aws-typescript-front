"use client";
import "@/app/globals.scss";
import WithGuards from "@/components/withauthguards/withauthguards";
import PageContext from "@/context/pagecontext/pagecontext";
import { DatosUsuarioState } from "@/context/usercontext/usercontext";
import { cleanData, cleanToken, getToken, getUserInfo } from "@/services/xstorage.cross.service";
import ErrorDialog from "@/smartcomponents/custom/errordialog/errordialog";
import InfoDialog from "@/smartcomponents/custom/infodialog/infodialog";
import SuccessDialog from "@/smartcomponents/custom/successdialog/successdialog";
import WarningDialog from "@/smartcomponents/custom/warningdialog/warningdialog";
import { useContext, useEffect, useState } from "react";
import { useIdleTimer } from "react-idle-timer";
import { sysAuthGuard } from "../authguards";
import { useSearchParams } from "next/navigation";
import { handleGoogleCallback } from "@/services/auth.service";

const metadata = {
  title: "gteate Next App",
  description: "Generated by gteate next app",
};

// interface UserInfo extends DatosUsuarioState {
//   iat: number;
//   exp: number;
// }

export default function RootLayout({ children }: { children: React.ReactNode }) {
  const pageContext = useContext(PageContext);
  if (pageContext === undefined) {
    throw new Error("PageStateContext must be inside a PageStateContextProvider");
  }

  const { successState, errorState, warningState, infoState, apiCallState } = pageContext!;

  // const [stopOnIdle, setStopOnIdle] = useState<boolean>(false);
  // const [showWarning, setShowWarning] = useState<boolean>(false);
  // const [showExpired, setShowExpired] = useState<boolean>(false);

  // const [userInfo, setUserInfo] = useState(getUserInfo());
  //const { iat, exp } = userInfo as UserInfo;

  // useEffect(() => {
  //   if (!iat || !exp) {
  //     location.replace('/');
  //     return;
  //   }

  //   const interval = setInterval(() => {
  //     const curretnUnixTime = Math.floor(Date.now() / 1000);
  //     const time = exp - curretnUnixTime;

  //     // if (time > 0) {
  //     //   const horas = Math.floor(time / 3600);
  //     //   const minutos = Math.floor((time % 3600) / 60);
  //     //   const segundos = Math.floor(time % 60);
  //     //   console.log(`tiempo restante: ${horas}:${minutos}:${segundos}`);
  //     // }

  //     if( time <= 600 && time > 0) {  // 10 minutos antes q expire el token
  //       !showExpired && setShowWarning(true);
  //       //console.log("token a punto de expirar");
  //     }

  //     if (curretnUnixTime >= exp) {
  //       setShowExpired(true);
  //       setShowWarning(false);
  //       setStopOnIdle(true);
  //       clearInterval(interval);
  //       cleanToken();
  //       //console.log("token expirado");
  //     }

  //   }, 1000);

  //   return () => clearInterval(interval);
  // }, [iat, exp, showExpired]);

  // const handleWarningClose = () => {
  //   setShowWarning(false);
  // };

  // const handleExpiredClose = () => {
  //   cleanData();
  //   setShowExpired(false);
  // };

  // const handleKeepActive = async () => {
  //   activityTimer.start();
  //   //await refreshCognitoToken();
  //   setShowWarning(false);
  //  setUserInfo(getUserInfo());
  // };

  // const handleLogout = () => {
  //   cleanData();
  //   setShowExpired(false);
  // };

  // const activityTimer = useIdleTimer({
  //   timeout: 1000 * 60 * 5, // 5 minutos de inactividad
  //   promptBeforeIdle: 1000 * 60 * 1, // 1 minuto antes de expirar
  //   stopOnIdle,
  //   onPrompt: () => {
  //     //console.log("token a punto de expirar por inactividad");
  //     !showExpired && setShowWarning(true);
  //   },
  //   onIdle: () => {
  //     //console.log("token expirado por inactividad");
  //     cleanToken();
  //     setShowWarning(false);
  //     setShowExpired(true);
  //     setStopOnIdle(true);
  //   },
  //   onActive: () => {
  //     //console.log('onActive');
  //   },
  // });

  // useEffect(() => {
  //   setStopOnIdle(false);
  // }, []);

  // useEffect(() => {
  //   const checkToken = () => {
  //     const token = getToken();
  //     if (!token) {
  //       setShowExpired(true);
  //     }
  //   };
  //   checkToken();
  //   const interval = setInterval(checkToken, 5000); // Revisión periódica cada 5 segundos
  //   return () => clearInterval(interval); //Limpiezaa
  // }, []);

  return (
    <>
      <WithGuards authGuards={sysAuthGuard}>{children}</WithGuards>

      {/* <TimeoutSessionDialog
        type={TimeoutSessionDialogTypes.Warning}
        open={showWarning}
        onClose={handleWarningClose}
        onPrimaryAction={handleKeepActive}
        onSecondaryAction={handleLogout}
      />
      <TimeoutSessionDialog
        type={TimeoutSessionDialogTypes.Expired}
        open={showExpired}
        onClose={handleExpiredClose}
        onPrimaryAction={handleLogout}
      /> */}

      <SuccessDialog
        message={successState.pageMessage.value}
        open={successState.pageDialog.value}
        onClose={successState.handleCloseDialog}
      />

      <ErrorDialog
        message={errorState.pageMessage.value}
        open={errorState.pageDialog.value}
        onClose={errorState.handleCloseDialog}
      />

      <WarningDialog
        message={warningState.pageMessage.value}
        open={warningState.pageDialog.value}
        onClose={warningState.handleCloseDialog}
      />

      <InfoDialog
        message={infoState.pageMessage.value}
        open={infoState.pageDialog.value}
        onClose={infoState.handleCloseDialog}
      />
    </>
  );
}
